{
	"info": {
		"_postman_id": "a486cde5-b0f8-4476-ab8a-505907c0a7ff",
		"name": "BooksAPI",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "10665184"
	},
	"item": [
		{
			"name": "Delete all books before testing",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// reset test collection indexes before testing\r",
							"pm.collectionVariables.set(\"postTestsIndex\", 0)\r",
							"pm.collectionVariables.set(\"getTestsIndex\", 0)\r",
							"pm.collectionVariables.set(\"deleteTestsIndex\", 0)\r",
							"pm.collectionVariables.set(\"getAfterDeleteTestsIndex\", 0)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/books",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "Post a book",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const currentPostIndex = parseInt(pm.collectionVariables.get(\"postTestsIndex\"))\r",
							"const currentPostTest = utils.getBookPostRequests()[currentPostIndex]\r",
							"pm.collectionVariables.set(\"currentTestRequest\", JSON.stringify(currentPostTest))\r",
							"pm.collectionVariables.set(\"currentRequestUrl\", currentPostTest.route)\r",
							"pm.collectionVariables.set(\"currentExpectedResponseCode\", currentPostTest.expectResponse.response)\r",
							"pm.collectionVariables.set(\"currentExpectedResponseJson\", JSON.stringify(currentPostTest.expectResponse.responseJson))\r",
							"pm.collectionVariables.set(\"currentBody\", JSON.stringify(currentPostTest.body))\r",
							"\r",
							"// Write console what we are testing\r",
							"console.log(currentPostTest.description + \". Post test \" + (currentPostIndex + 1) + \" of \" + pm.collectionVariables.get(\"postTestsLength\"))\r",
							"pm.collectionVariables.set(\"postTestsIndex\", currentPostIndex + 1)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"/**\r",
							" * Post a book.\r",
							" * Test 1: Test that request returns correct status code.\r",
							" * Test 2 (optional): Test that json response matches the expected\r",
							" */\r",
							"\r",
							"const switchValue = parseInt(pm.collectionVariables.get(\"currentExpectedResponseCode\"))\r",
							"\r",
							"switch(switchValue) {\r",
							"    case 200:\r",
							"        // Test 1\r",
							"        pm.test(\"Status code is 200\", function () {\r",
							"        pm.response.to.have.status(parseInt(pm.collectionVariables.get(\"currentExpectedResponseCode\")))\r",
							"        })\r",
							"\r",
							"        // Test 2\r",
							"        pm.test(\"Response body matches what we expected\", function () {\r",
							"            pm.expect(JSON.stringify(pm.response.json())).to.eql(pm.collectionVariables.get(\"currentExpectedResponseJson\"))\r",
							"        })\r",
							"        break\r",
							"    case 204:\r",
							"    case 400:\r",
							"    case 404:\r",
							"        // Test 1\r",
							"        pm.test(\"Status code is \" + switchValue, function () {\r",
							"        pm.response.to.have.status(parseInt(pm.collectionVariables.get(\"currentExpectedResponseCode\")))\r",
							"        })\r",
							"        break\r",
							"}\r",
							"\r",
							"const postTestsLength =  pm.collectionVariables.get(\"postTestsLength\")\r",
							"const postTestIndex = pm.collectionVariables.get(\"postTestsIndex\")\r",
							"\r",
							"// If post tests are remainingt run this request again\r",
							"if (postTestIndex < postTestsLength){\r",
							"    postman.setNextRequest(\"Post a book\")\r",
							"} \r",
							"// If number of post tests is reached, continue testing onward\r",
							"else {\r",
							"    postman.setNextRequest(\"Get all books with optional filter\")\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{currentBody}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/books",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all books with optional filter",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const currentGetIndex = parseInt(pm.collectionVariables.get(\"getTestsIndex\"))\r",
							"const currentGetTest = utils.getBookGetRequests()[currentGetIndex]\r",
							"pm.collectionVariables.set(\"currentTestRequest\", JSON.stringify(currentGetTest))\r",
							"pm.collectionVariables.set(\"currentRequestUrl\", currentGetTest.route)\r",
							"pm.collectionVariables.set(\"currentExpectedResponseCode\", currentGetTest.expectResponse.response)\r",
							"pm.collectionVariables.set(\"currentExpectedResponseJson\", JSON.stringify(currentGetTest.expectResponse.responseJson))\r",
							"pm.collectionVariables.set(\"currentBody\", JSON.stringify(currentGetTest.body))\r",
							"\r",
							"// Write console what we are testing\r",
							"console.log(currentGetTest.description + \". Get test \" + (currentGetIndex + 1) + \" of \" + pm.collectionVariables.get(\"getTestsLength\"))\r",
							"pm.collectionVariables.set(\"getTestsIndex\", (currentGetIndex + 1))"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"/**\r",
							" * Get a book/books.\r",
							" * Test 1: Test that request returns correct status code.\r",
							" * Test 2 (optional): Test that json response matches the expected\r",
							" */\r",
							"\r",
							"const switchValue = parseInt(pm.collectionVariables.get(\"currentExpectedResponseCode\"))\r",
							"\r",
							"switch(switchValue) {\r",
							"    case 200:\r",
							"        // Test 1\r",
							"        pm.test(\"Status code is 200\", function () {\r",
							"        pm.response.to.have.status(parseInt(pm.collectionVariables.get(\"currentExpectedResponseCode\")))\r",
							"        })\r",
							"\r",
							"        // Test 2\r",
							"        pm.test(\"Response body matches what we expected\", function () {\r",
							"            pm.expect(JSON.stringify(pm.response.json())).to.eql(pm.collectionVariables.get(\"currentExpectedResponseJson\"))\r",
							"        })\r",
							"        break\r",
							"    case 204:\r",
							"    case 400:\r",
							"    case 404:\r",
							"        // Test 1\r",
							"        pm.test(\"Status code is \" + switchValue, function () {\r",
							"            pm.response.to.have.status(parseInt(pm.collectionVariables.get(\"currentExpectedResponseCode\")))\r",
							"        })\r",
							"        break\r",
							"}\r",
							"\r",
							"const getTestsLength =  pm.collectionVariables.get(\"getTestsLength\")\r",
							"const getTestIndex = pm.collectionVariables.get(\"getTestsIndex\")\r",
							"\r",
							"// If post tests are remainingt run this request again\r",
							"if (getTestIndex < getTestsLength){\r",
							"    postman.setNextRequest(\"Get all books with optional filter\")\r",
							"} \r",
							"// If number of post tests is reached, continue testing onward\r",
							"else {\r",
							"    postman.setNextRequest(\"Delete a book\")\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{currentRequestUrl}}",
					"host": [
						"{{currentRequestUrl}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete a book",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const currentDeleteIndex = parseInt(pm.collectionVariables.get(\"deleteTestsIndex\"))\r",
							"const currentDeleteTest = utils.getBookDeleteRequests()[currentDeleteIndex]\r",
							"pm.collectionVariables.set(\"currentTestRequest\", JSON.stringify(currentDeleteTest))\r",
							"pm.collectionVariables.set(\"currentRequestUrl\", currentDeleteTest.route)\r",
							"pm.collectionVariables.set(\"currentExpectedResponseCode\", currentDeleteTest.expectResponse.response)\r",
							"pm.collectionVariables.set(\"currentExpectedResponseJson\", JSON.stringify(currentDeleteTest.expectResponse.responseJson))\r",
							"pm.collectionVariables.set(\"currentBody\", JSON.stringify(currentDeleteTest.body))\r",
							"\r",
							"// Write console what we are testing\r",
							"console.log(currentDeleteTest.description + \". Delete test \" + (currentDeleteIndex + 1) + \" of \" + pm.collectionVariables.get(\"deleteTestsLength\"))\r",
							"pm.collectionVariables.set(\"deleteTestsIndex\", (currentDeleteIndex + 1))"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"/**\r",
							" * Delete a book.\r",
							" * Test 1: Test that request returns correct status code.\r",
							" * Test 2 (optional): Test that json response matches the expected\r",
							" */\r",
							"\r",
							"const switchValue = parseInt(pm.collectionVariables.get(\"currentExpectedResponseCode\"))\r",
							"\r",
							"switch(switchValue) {\r",
							"    case 200:\r",
							"        // Test 1\r",
							"        pm.test(\"Status code is 200\", function () {\r",
							"        pm.response.to.have.status(parseInt(pm.collectionVariables.get(\"currentExpectedResponseCode\")))\r",
							"        })\r",
							"\r",
							"        // Test 2\r",
							"        pm.test(\"Response body matches what we expected\", function () {\r",
							"            pm.expect(JSON.stringify(pm.response.json())).to.eql(pm.collectionVariables.get(\"currentExpectedResponseJson\"))\r",
							"        })\r",
							"        break\r",
							"    case 204:\r",
							"    case 400:\r",
							"    case 404:\r",
							"        // Test 1\r",
							"        pm.test(\"Status code is \" + switchValue, function () {\r",
							"            pm.response.to.have.status(parseInt(pm.collectionVariables.get(\"currentExpectedResponseCode\")))\r",
							"        })\r",
							"        break\r",
							"}\r",
							"\r",
							"const deleteTestsLength =  pm.collectionVariables.get(\"deleteTestsLength\")\r",
							"const deleteTestIndex = pm.collectionVariables.get(\"deleteTestsIndex\")\r",
							"\r",
							"// If delete tests are remainingt run this request again\r",
							"if (deleteTestIndex < deleteTestsLength){\r",
							"    postman.setNextRequest(\"Delete a book\")\r",
							"} \r",
							"// If number of delete tests is reached, continue testing onward\r",
							"else {\r",
							"    postman.setNextRequest(\"Get all books after delete\")\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{currentRequestUrl}}",
					"host": [
						"{{currentRequestUrl}}"
					],
					"query": [
						{
							"key": "author",
							"value": "Esa",
							"disabled": true
						},
						{
							"key": "year",
							"value": "1992",
							"disabled": true
						},
						{
							"key": "publisher",
							"value": "Otava",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all books after delete",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const currentGetDelIndex = parseInt(pm.collectionVariables.get(\"getAfterDeleteTestsIndex\"))\r",
							"const currentGetDelTest = utils.getBookGetAfterDeleteRequests()[currentGetDelIndex]\r",
							"pm.collectionVariables.set(\"currentTestRequest\", JSON.stringify(currentGetDelTest))\r",
							"pm.collectionVariables.set(\"currentRequestUrl\", currentGetDelTest.route)\r",
							"pm.collectionVariables.set(\"currentExpectedResponseCode\", currentGetDelTest.expectResponse.response)\r",
							"pm.collectionVariables.set(\"currentExpectedResponseJson\", JSON.stringify(currentGetDelTest.expectResponse.responseJson))\r",
							"pm.collectionVariables.set(\"currentBody\", JSON.stringify(currentGetDelTest.body))\r",
							"\r",
							"// Write console what we are testing\r",
							"console.log(currentGetDelTest.description + \". Get after delete test \" + (currentGetDelIndex + 1) + \" of \" + pm.collectionVariables.get(\"getAfterDeleteTestsLength\"))\r",
							"pm.collectionVariables.set(\"getAfterDeleteTestsIndex\", (currentGetDelIndex + 1))"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"/**\r",
							" * Get all books.\r",
							" * Test 1: Test that request returns correct status code.\r",
							" * Test 2 (optional): Test that json response matches the expected\r",
							" */\r",
							"\r",
							"const switchValue = parseInt(pm.collectionVariables.get(\"currentExpectedResponseCode\"))\r",
							"\r",
							"switch(switchValue) {\r",
							"    case 200:\r",
							"        // Test 1\r",
							"        pm.test(\"Status code is 200\", function () {\r",
							"        pm.response.to.have.status(parseInt(pm.collectionVariables.get(\"currentExpectedResponseCode\")))\r",
							"        })\r",
							"\r",
							"        // Test 2\r",
							"        pm.test(\"Response body matches what we expected\", function () {\r",
							"            pm.expect(JSON.stringify(pm.response.json())).to.eql(pm.collectionVariables.get(\"currentExpectedResponseJson\"))\r",
							"        })\r",
							"        break\r",
							"    case 204:\r",
							"    case 400:\r",
							"    case 404:\r",
							"        // Test 1\r",
							"        pm.test(\"Status code is \" + switchValue, function () {\r",
							"            pm.response.to.have.status(parseInt(pm.collectionVariables.get(\"currentExpectedResponseCode\")))\r",
							"        })\r",
							"        break\r",
							"}\r",
							"\r",
							"const getDelTestsLength =  pm.collectionVariables.get(\"getAfterDeleteTestsLength\")\r",
							"const getDelTestIndex = pm.collectionVariables.get(\"getAfterDeleteTestsIndex\")\r",
							"\r",
							"// If post tests are remaining run this request again, otherwise finish\r",
							"if (getDelTestIndex < getDelTestsLength){\r",
							"    postman.setNextRequest(\"Get all books after delete\")\r",
							"} "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{currentRequestUrl}}",
					"host": [
						"{{currentRequestUrl}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"utils = {",
					"    getBookPostRequests: () => {",
					"        const bookPostRequests = [",
					"            {",
					"                route: \"http://localhost:9000/books\",",
					"                description: \"Post a new book\",",
					"                body: {",
					"                    \"title\": \"Harry Potter and the Philosophers Stone\",",
					"                    \"author\": \"J.K. Rowling\",",
					"                    \"year\": 1997,",
					"                    \"publisher\": \"Bloomsbury (UK)\",",
					"                    \"description\": \"A book about a wizard boy\"",
					"                },",
					"                expectResponse: {",
					"                    \"response\": 200,",
					"                    \"responseJson\": {",
					"                        \"id\":1",
					"                    }",
					"                }",
					"            },",
					"            {",
					"                route: \"http://localhost:9000/books\",",
					"                description: \"Post another book without a publisher\",",
					"                body: {",
					"                    \"title\": \"Old Testament\",",
					"                    \"author\": \"Various\",",
					"                    \"year\": -165,",
					"                    \"description\": \"A holy book of Christianity and Jewish faith\"",
					"                },",
					"                expectResponse: {",
					"                    \"response\": 200,",
					"                    \"responseJson\": {",
					"                        \"id\":2",
					"                    }",
					"                }",
					"            },",
					"            {",
					"                route: \"http://localhost:9000/books\",",
					"                description: \"Post third book without description\",",
					"                body: {",
					"                    \"title\": \"The Subtle Knife\",",
					"                    \"author\": \"Philip Pullman\",",
					"                    \"year\": 1997,",
					"                    \"publisher\": \"Scholastic Point\"",
					"                },",
					"                expectResponse: {",
					"                    \"response\": 200,",
					"                    \"responseJson\": {",
					"                        \"id\":3",
					"                    }",
					"                }",
					"            },",
					"            {",
					"                route: \"http://localhost:9000/books\",",
					"                description: \"Post a new book without a description\",",
					"                body: {",
					"                        \"title\": \"Goosebumps: Beware, the Snowman\",",
					"                        \"author\": \"R.L. Stine\",",
					"                        \"year\": 1997,",
					"                        \"publisher\": \"Scholastic Point\"",
					"",
					"                },",
					"                expectResponse: {",
					"                    \"response\": 200,",
					"                    \"responseJson\": {",
					"                        \"id\":4",
					"                    }",
					"                }",
					"            },",
					"            {",
					"                route: \"http://localhost:9000/books\",",
					"                description: \"Try to post a book with missing title\",",
					"                body: {",
					"                    \"author\": \"Douglas Adams\",",
					"                    \"year\": 1979,",
					"                    \"publisher\": \"Pan Books\",",
					"                    \"description\": \"Originally a radio series\"",
					"                },",
					"                expectResponse: {",
					"                    \"response\": 400,",
					"                    \"responseJson\": null",
					"                }",
					"            },",
					"            {",
					"                route: \"http://localhost:9000/books\",",
					"                description: \"Try to post a book with missing year\",",
					"                body: {",
					"                    \"title\": \"The Hitchhiker's Guide to the Galaxy\",",
					"                    \"author\": \"Douglas Adams\",",
					"                    \"publisher\": \"Pan Books\",",
					"                    \"description\": \"Originally a radio series\"",
					"                },",
					"                expectResponse: {",
					"                    \"response\": 400,",
					"                    \"responseJson\": null",
					"                }",
					"            },",
					"            {",
					"                route: \"http://localhost:9000/books\",",
					"                description: \"Try to post a book with missing year\",",
					"                body: {",
					"                    \"author\": \"Douglas Adams\",",
					"                    \"title\": \"The Hitchhiker's Guide to the Galaxy\",",
					"                    \"pages\": 208,",
					"                    \"description\": \"Originally a radio series\"",
					"                },",
					"                expectResponse: {",
					"                    \"response\": 400,",
					"                    \"responseJson\": null",
					"                }",
					"            },",
					"            {",
					"                route: \"http://localhost:9000/books\",",
					"                description: \"Try to post a book with empty author\",",
					"                body: {",
					"                    \"author\": \"\",",
					"                    \"title\": \"The Hitchhiker's Guide to the Galaxy\",",
					"                    \"year\": 1979,",
					"                    \"publisher\": \"Pan Books\",",
					"                    \"description\": \"Originally a radio series\"",
					"                },",
					"                expectResponse: {",
					"                    \"response\": 400,",
					"                    \"responseJson\": null",
					"                }",
					"            },",
					"            {",
					"                route: \"http://localhost:9000/books\",",
					"                description: \"Try to post a book with empty title\",",
					"                body: {",
					"                    \"author\": \"Douglas Adams\",",
					"                    \"title\": \"\",",
					"                    \"year\": 1979,",
					"                    \"publisher\": \"Pan Books\",",
					"                    \"description\": \"Originally a radio series\"",
					"                },",
					"                expectResponse: {",
					"                    \"response\": 400,",
					"                    \"responseJson\": null",
					"                }",
					"            },",
					"            {",
					"                route: \"http://localhost:9000/books\",",
					"                description: \"Try to post a book with non-integer year\",",
					"                body: {",
					"                    \"author\": \"Douglas Adams\",",
					"                    \"title\": \"\",",
					"                    \"year\": 1979.999,",
					"                    \"publisher\": \"Pan Books\",",
					"                    \"description\": \"Originally a radio series\"",
					"                },",
					"                expectResponse: {",
					"                    \"response\": 400,",
					"                    \"responseJson\": null",
					"                }",
					"            },",
					"            {",
					"                route: \"http://localhost:9000/books\",",
					"                description: \"Try to post a book with another non-integer year\",",
					"                body: {",
					"                    \"author\": \"Douglas Adams\",",
					"                    \"title\": \"\",",
					"                    \"year\": \"nineteen-ninety-seven\",",
					"                    \"publisher\": \"Pan Books\",",
					"                    \"description\": \"Originally a radio series\"",
					"                },",
					"                expectResponse: {",
					"                    \"response\": 400,",
					"                    \"responseJson\": null",
					"                }",
					"            },",
					"            {",
					"                route: \"http://localhost:9000/books\",",
					"                description: \"Try to post a book with empty publisher\",",
					"                body: {",
					"                    \"author\": \"Douglas Adams\",",
					"                    \"title\": \"\",",
					"                    \"year\": 1979,",
					"                    \"publisher\": \"\",",
					"                    \"description\": \"Originally a radio series\"",
					"                },",
					"                expectResponse: {",
					"                    \"response\": 400,",
					"                    \"responseJson\": null",
					"                }",
					"            },",
					"            {",
					"                route: \"http://localhost:9000/books\",",
					"                description: \"Try to post the same book again with same author, title and year\",",
					"                body: {",
					"                    \"title\": \"Harry Potter and the Philosophers Stone\",",
					"                    \"author\": \"J.K. Rowling\",",
					"                    \"year\": 1997,",
					"                    \"publisher\": \"Bloomsbury (UK)\",",
					"                    \"description\": \"A book about a wizard boy\"",
					"                },",
					"                expectResponse: {",
					"                    \"response\": 400,",
					"                    \"responseJson\": null",
					"                }",
					"            },",
					"            {",
					"                route: \"http://localhost:9000/books\",",
					"                description: \"Try to post an invalid JSON\",",
					"                body: {",
					"                    something: \"whoops\"",
					"                },",
					"                expectResponse: {",
					"                    \"response\": 400,",
					"                    \"responseJson\": null",
					"                }",
					"            },",
					"        ]",
					"        return bookPostRequests",
					"    },",
					"",
					"    getBookGetRequests: () => {",
					"        const bookGetRequests = [",
					"                {",
					"                    route: \"http://localhost:9000/books\",",
					"                    body: null,",
					"                    description: \"Get all books\",",
					"                    expectResponse: {",
					"                        \"response\": 200,",
					"                        \"responseJson\": [",
					"                            {",
					"                                \"id\": 1,",
					"                                \"title\": \"Harry Potter and the Philosophers Stone\",",
					"                                \"author\": \"J.K. Rowling\",",
					"                                \"year\": 1997,",
					"                                \"publisher\": \"Bloomsbury (UK)\",",
					"                                \"description\": \"A book about a wizard boy\"",
					"                            },",
					"                            {",
					"                                \"id\": 2,",
					"                                \"title\": \"Old Testament\",",
					"                                \"author\": \"Various\",",
					"                                \"year\": -165,",
					"                                \"publisher\": null,",
					"                                \"description\": \"A holy book of Christianity and Jewish faith\"",
					"                            },",
					"                            {",
					"                                \"id\": 3,",
					"                                \"title\": \"The Subtle Knife\",",
					"                                \"author\": \"Philip Pullman\",",
					"                                \"year\": 1997,",
					"                                \"publisher\": \"Scholastic Point\",",
					"                                \"description\": null",
					"                            },",
					"                            {",
					"                                \"id\": 4,",
					"                                \"title\": \"Goosebumps: Beware, the Snowman\",",
					"                                \"author\": \"R.L. Stine\",",
					"                                \"year\": 1997,",
					"                                \"publisher\": \"Scholastic Point\",",
					"                                \"description\": null",
					"                            }",
					"                        ]",
					"                    }",
					"                },",
					"                {",
					"                    route: \"http://localhost:9000/books?author=J%2EK%2E%20Rowling\",",
					"                    body: null,",
					"                    description: \"Get all books with filter J.K. Rowling\",",
					"                    expectResponse: {",
					"                        \"response\": 200,",
					"                        \"responseJson\": [",
					"                            {",
					"                                \"id\": 1,",
					"                                \"title\": \"Harry Potter and the Philosophers Stone\",",
					"                                \"author\": \"J.K. Rowling\",",
					"                                \"year\": 1997,",
					"                                \"publisher\": \"Bloomsbury (UK)\",",
					"                                \"description\": \"A book about a wizard boy\"",
					"                            }",
					"                        ]",
					"                    }",
					"                },",
					"                {",
					"                    route: \"http://localhost:9000/books?year=1997\",",
					"                    body: null,",
					"                    description: \"Get books by year 1997\",",
					"                    expectResponse: {",
					"                        \"response\": 200,",
					"                        \"responseJson\": [",
					"                            {",
					"                                \"id\": 1,",
					"                                \"title\": \"Harry Potter and the Philosophers Stone\",",
					"                                \"author\": \"J.K. Rowling\",",
					"                                \"year\": 1997,",
					"                                \"publisher\": \"Bloomsbury (UK)\",",
					"                                \"description\": \"A book about a wizard boy\"",
					"                            },",
					"                            {",
					"                                \"id\": 3,",
					"                                \"title\": \"The Subtle Knife\",",
					"                                \"author\": \"Philip Pullman\",",
					"                                \"year\": 1997,",
					"                                \"publisher\": \"Scholastic Point\",",
					"                                \"description\": null",
					"                            },",
					"                            {",
					"                                \"id\": 4,",
					"                                \"title\": \"Goosebumps: Beware, the Snowman\",",
					"                                \"author\": \"R.L. Stine\",",
					"                                \"year\": 1997,",
					"                                \"publisher\": \"Scholastic Point\",",
					"                                \"description\": null",
					"                            }",
					"                        ]",
					"                    }",
					"                },",
					"                {",
					"                    route: \"http://localhost:9000/books?publisher=Otava\",",
					"                    body: null,",
					"                    description: \"Get books by publisher Otava\",",
					"                    expectResponse: {",
					"                        \"response\": 200,",
					"                        \"responseJson\": []",
					"                    }",
					"                },",
					"                {",
					"                    route: \"http://localhost:9000/books?year=1997&publisher=scholastic%20point\",",
					"                    body: null,",
					"                    description: \"Get books by year 1997 and publisher scholastic point\",",
					"                    expectResponse: {",
					"                        \"response\": 200,",
					"                        \"responseJson\": [",
					"                            {",
					"                                \"id\": 3,",
					"                                \"title\": \"The Subtle Knife\",",
					"                                \"author\": \"Philip Pullman\",",
					"                                \"year\": 1997,",
					"                                \"publisher\": \"Scholastic Point\",",
					"                                \"description\": null",
					"                            },",
					"                            {",
					"                                \"id\": 4,",
					"                                \"title\": \"Goosebumps: Beware, the Snowman\",",
					"                                \"author\": \"R.L. Stine\",",
					"                                \"year\": 1997,",
					"                                \"publisher\": \"Scholastic Point\",",
					"                                \"description\": null",
					"                            }",
					"                        ]",
					"                    }",
					"                },",
					"                {",
					"                    route: \"http://localhost:9000/books/1\",",
					"                    body: null,",
					"                    description: \"Get a single book with id 1\",",
					"                    expectResponse: {",
					"                        \"response\": 200,",
					"                        \"responseJson\": {",
					"                            \"id\": 1,",
					"                            \"title\": \"Harry Potter and the Philosophers Stone\",",
					"                            \"author\": \"J.K. Rowling\",",
					"                            \"year\": 1997,",
					"                            \"publisher\": \"Bloomsbury (UK)\",",
					"                            \"description\": \"A book about a wizard boy\"",
					"                        }",
					"                    }",
					"                },",
					"                {",
					"                    route: \"http://localhost:9000/books/0\",",
					"                    body: null,",
					"                    description: \"Try to get a non-existing book with id 0\",",
					"                    expectResponse: {",
					"                        \"response\": 404,",
					"                        \"responseJson\": null",
					"                    }",
					"                },",
					"                {",
					"                    route: \"http://localhost:9000/books/x\",",
					"                    body: null,",
					"                    description: \"Try to get a book with a non-integer id x\",",
					"                    expectResponse: {",
					"                        \"response\": 404,",
					"                        \"responseJson\": null",
					"                    }",
					"                },",
					"                {",
					"                    route: \"http://localhost:9000/books/1.5\",",
					"                    body: null,",
					"                    description: \"Try to get a book with another non-integer id 1.5\",",
					"                    expectResponse: {",
					"                        \"response\": 404,",
					"                        \"responseJson\": null",
					"                    }",
					"                },",
					"        ]",
					"        return bookGetRequests",
					"    },",
					"",
					"    getBookDeleteRequests: () => {",
					"        const bookDeleteRequests = [",
					"                {",
					"                    route: \"http://localhost:9000/books/1\",",
					"                    body: null,",
					"                    description: \"Delete an existing book from the database with id 1\",",
					"                    expectResponse: {",
					"                        \"response\": 204,",
					"                        \"responseJson\": null",
					"                    }",
					"                },",
					"                {",
					"                    route: \"http://localhost:9000/books/0\",",
					"                    body: null,",
					"                    description: \"Try to delete a non-existing book with id 0\",",
					"                    expectResponse: {",
					"                        \"response\": 404,",
					"                        \"responseJson\": null",
					"                    }",
					"                },",
					"                {",
					"                    route: \"http://localhost:9000/books/x\",",
					"                    body: null,",
					"                    description: \"Try to delete a book with a non-integer id x\",",
					"                    expectResponse: {",
					"                        \"response\": 404,",
					"                        \"responseJson\": null",
					"                    }",
					"                },",
					"                {",
					"                    route: \"http://localhost:9000/books/1.5\",",
					"                    body: null,",
					"                    description: \"Try to delete another book with a non-integer id 1.5\",",
					"                    expectResponse: {",
					"                        \"response\": 404,",
					"                        \"responseJson\": null",
					"                    }",
					"                },",
					"        ]",
					"        return bookDeleteRequests",
					"    },",
					"",
					"    getBookGetAfterDeleteRequests: () => {",
					"        const bookGetAfterDeleteRequests = [",
					"                {",
					"                    route: \"http://localhost:9000/books\",",
					"                    body: null,",
					"                    description: \"Get all books after deletion from the database\",",
					"                    expectResponse: {",
					"                        \"response\": 200,",
					"                        \"responseJson\": [",
					"                            {",
					"                                \"id\": 2,",
					"                                \"title\": \"Old Testament\",",
					"                                \"author\": \"Various\",",
					"                                \"year\": -165,",
					"                                \"publisher\": null,",
					"                                \"description\": \"A holy book of Christianity and Jewish faith\"",
					"                            },",
					"                            {",
					"                                \"id\": 3,",
					"                                \"title\": \"The Subtle Knife\",",
					"                                \"author\": \"Philip Pullman\",",
					"                                \"year\": 1997,",
					"                                \"publisher\": \"Scholastic Point\",",
					"                                \"description\": null",
					"                            },",
					"                            {",
					"                                \"id\": 4,",
					"                                \"title\": \"Goosebumps: Beware, the Snowman\",",
					"                                \"author\": \"R.L. Stine\",",
					"                                \"year\": 1997,",
					"                                \"publisher\": \"Scholastic Point\",",
					"                                \"description\": null",
					"                            }",
					"                        ]",
					"                    }",
					"                }",
					"        ]",
					"        return bookGetAfterDeleteRequests",
					"    }",
					"}",
					"",
					"// set test cases length in collection variabless",
					"pm.collectionVariables.set(\"postTestsLength\", utils.getBookPostRequests().length)",
					"pm.collectionVariables.set(\"getTestsLength\", utils.getBookGetRequests().length)",
					"pm.collectionVariables.set(\"deleteTestsLength\", utils.getBookDeleteRequests().length)",
					"pm.collectionVariables.set(\"getAfterDeleteTestsLength\", utils.getBookGetAfterDeleteRequests().length)"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:9000",
			"type": "string"
		},
		{
			"key": "postTestsLength",
			"value": "",
			"type": "string"
		},
		{
			"key": "getTestsLength",
			"value": "",
			"type": "string"
		},
		{
			"key": "deleteTestsLength",
			"value": "",
			"type": "string"
		},
		{
			"key": "getAfterDeleteTestsLength",
			"value": "",
			"type": "string"
		},
		{
			"key": "postTestsIndex",
			"value": ""
		},
		{
			"key": "getTestsIndex",
			"value": ""
		},
		{
			"key": "deleteTestsIndex",
			"value": ""
		},
		{
			"key": "getAfterDeleteTestsIndex",
			"value": ""
		},
		{
			"key": "currentPostBody",
			"value": ""
		},
		{
			"key": "currentTestRequest",
			"value": ""
		},
		{
			"key": "currentRequestUrl",
			"value": ""
		},
		{
			"key": "currentExpectedResponseCode",
			"value": ""
		},
		{
			"key": "currentExpectedResponseJson",
			"value": ""
		},
		{
			"key": "currentBody",
			"value": ""
		}
	]
}